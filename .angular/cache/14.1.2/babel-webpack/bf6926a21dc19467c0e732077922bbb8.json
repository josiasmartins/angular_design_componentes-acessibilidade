{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/unique-id/unique-id.service\";\nexport let YesNoButtonGroupComponent = /*#__PURE__*/(() => {\n  class YesNoButtonGroupComponent {\n    constructor(uniqueIdService) {\n      this.uniqueIdService = uniqueIdService;\n      this.disabled = false;\n      this.value = null;\n      this.label = ''; // EventEmitter: vai emitir uma string\n      // Lembre-se da convenção no qual a @Output() property deve ter o mesmo nome da\n      // @Input() property acrescido com o sufixo Change\n\n      this.valueChange = new EventEmitter();\n      this.id = null;\n      this.options = YesNoButtonGroupOption;\n\n      this.onChange = value => {};\n\n      this.onTouched = () => {};\n\n      this.id = uniqueIdService.generateuniqueIdWithPrefix('yes-no-button-group');\n    }\n\n    ngOnInit() {}\n\n    writeValue(value) {\n      this.value = value;\n      this.onChange(this.value);\n      this.valueChange.emit(this.value);\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    activate(value) {\n      // this.value = value;\n      // // emit: notifica o mundo externo que o valor mudou\n      // this.valueChange.emit(this.value);\n      this.writeValue(value);\n    }\n\n  }\n\n  YesNoButtonGroupComponent.ɵfac = function YesNoButtonGroupComponent_Factory(t) {\n    return new (t || YesNoButtonGroupComponent)(i0.ɵɵdirectiveInject(i1.UniqueIdService));\n  };\n\n  YesNoButtonGroupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: YesNoButtonGroupComponent,\n    selectors: [[\"app-yes-no-button-group\"]],\n    inputs: {\n      disabled: \"disabled\",\n      value: \"value\",\n      label: \"label\"\n    },\n    outputs: {\n      valueChange: \"valueChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      /**\r\n       * NG_VALUE_ACESSOR: É um injection token que marca nosso componente para que\r\n       * seja injetado dentro da infraestrutura do formGroup.\r\n       */\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      // useExisting: use alguém\n      // forwardRef(): mostra só quando tiver a referencia\n\n      /**\r\n       * forwardRef: É usado quando o token ao qual precisamos nos referir para fins de DI é declarado, mas ainda não definido\r\n       */\n      useExisting: forwardRef(() => YesNoButtonGroupComponent)\n    }])],\n    decls: 11,\n    vars: 10,\n    consts: [[\"role\", \"radiogroup\", 1, \"button-group\"], [1, \"radio\"], [\"type\", \"radio\", 3, \"change\"], [1, \"button\", \"button-yes\"], [1, \"button\", \"button-no\"]],\n    template: function YesNoButtonGroupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"input\", 2);\n        i0.ɵɵlistener(\"change\", function YesNoButtonGroupComponent_Template_input_change_4_listener() {\n          return ctx.activate(ctx.options.YES);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"label\", 3);\n        i0.ɵɵtext(6, \"YES\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 1)(8, \"input\", 2);\n        i0.ɵɵlistener(\"change\", function YesNoButtonGroupComponent_Template_input_change_8_listener() {\n          return ctx.activate(ctx.options.NO);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"label\", 4);\n        i0.ɵɵtext(10, \"No\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-label\", ctx.label);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.label);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"id\", ctx.id + \"-yes\")(\"name\", ctx.id)(\"checked\", ctx.value === ctx.options.YES);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"for\", ctx.id + \"-yes\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵattribute(\"id\", ctx.id + \"-no\")(\"name\", ctx.id)(\"checked\", ctx.value === ctx.options.NO);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"for\", ctx.id + \"-no\");\n      }\n    },\n    styles: [\".button-group[_ngcontent-%COMP%]   .label[_ngcontent-%COMP%]{margin-left:.5rem}.button-group[_ngcontent-%COMP%]   .button[_ngcontent-%COMP%]{border:1px solid #aeb6c6;padding:.5rem .75rem;margin:0;color:#000;background-color:#fff}.button-group[_ngcontent-%COMP%]   .button.button-yes[_ngcontent-%COMP%]{border-radius:5px 0 0 5px}.button-group[_ngcontent-%COMP%]   .button.button-no[_ngcontent-%COMP%]{border-radius:0 5px 5px 0}.button-group[_ngcontent-%COMP%]   .button.button-pressed[_ngcontent-%COMP%], .button-group[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:checked + label.button[_ngcontent-%COMP%]{background-color:#0fc7ff;border-color:#0fc7ff;box-shadow:inset 0 0 5px #0003}.button-group[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]{position:relative;display:inline-block}.button-group[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{opacity:0;position:absolute;top:25%;left:25%}.button-group[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:focus + label[_ngcontent-%COMP%]{outline:solid 1px #272c3f}.button-group[_ngcontent-%COMP%]   .radio[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]{display:block}\"]\n  });\n  return YesNoButtonGroupComponent;\n})();\nvar YesNoButtonGroupOption = /*#__PURE__*/(() => {\n  (function (YesNoButtonGroupOption) {\n    YesNoButtonGroupOption[\"YES\"] = \"yes\";\n    YesNoButtonGroupOption[\"NO\"] = \"no\";\n  })(YesNoButtonGroupOption || (YesNoButtonGroupOption = {}));\n\n  return YesNoButtonGroupOption;\n})();","map":null,"metadata":{},"sourceType":"module"}