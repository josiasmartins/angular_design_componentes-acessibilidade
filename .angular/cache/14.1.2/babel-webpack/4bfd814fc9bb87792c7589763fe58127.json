{"ast":null,"code":"import { QueryList } from '@angular/core';\nimport { KeyboardManagerItemDirective } from './keyboard-manager-item.directive';\nimport * as i0 from \"@angular/core\";\nexport let KeyboardManagerDirective = /*#__PURE__*/(() => {\n  class KeyboardManagerDirective {\n    constructor() {\n      // Contentchild: busca todo mundo que é filho do elemento KeyboardManagerDirective\n      // QueryList: atualiza dinamicamente as listas\n      this.items = null;\n    }\n\n    manageKeys(event) {\n      // event.key: dá acesso a tecla pressionado\n      switch (event.key) {\n        case 'ArrowUp':\n          this.moveFocus(ArrowDirective.RIGHT).focus();\n          break;\n\n        case 'ArrowDown':\n          this.moveFocus(ArrowDirective.LEFT).focus();\n          break;\n\n        case 'ArrowLeft':\n          this.moveFocus(ArrowDirective.LEFT).focus();\n          break;\n\n        case 'ArrowRight':\n          this.moveFocus(ArrowDirective.RIGHT).focus();\n          break;\n      }\n    }\n\n    moveFocus(direction) {\n      const items = this.items.toArray();\n      console.log(this.items);\n      const currentSelectedIndex = items.findIndex(item => item.isFocused());\n      const targetElementFocus = items[currentSelectedIndex + direction];\n\n      if (targetElementFocus) {\n        return targetElementFocus;\n      }\n\n      return direction === ArrowDirective.LEFT ? items[items.length - 1] : items[0];\n    }\n\n  }\n\n  KeyboardManagerDirective.ɵfac = function KeyboardManagerDirective_Factory(t) {\n    return new (t || KeyboardManagerDirective)();\n  };\n\n  KeyboardManagerDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: KeyboardManagerDirective,\n    selectors: [[\"\", \"appKm\", \"\"]],\n    contentQueries: function KeyboardManagerDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, KeyboardManagerItemDirective, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    hostBindings: function KeyboardManagerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function KeyboardManagerDirective_keyup_HostBindingHandler($event) {\n          return ctx.manageKeys($event);\n        });\n      }\n    }\n  });\n  return KeyboardManagerDirective;\n})();\nvar ArrowDirective = /*#__PURE__*/(() => {\n  (function (ArrowDirective) {\n    ArrowDirective[ArrowDirective[\"LEFT\"] = -1] = \"LEFT\";\n    ArrowDirective[ArrowDirective[\"RIGHT\"] = 1] = \"RIGHT\";\n  })(ArrowDirective || (ArrowDirective = {}));\n\n  return ArrowDirective;\n})();","map":{"version":3,"mappings":"AAAA,SAAmDA,SAAnD,QAAoE,eAApE;AACA,SAASC,4BAAT,QAA6C,mCAA7C;;AAKA,WAAaC,wBAAb;EAAM,MAAOA,wBAAP,CAA+B;IAHrCC;MAKE;MACA;MACsD,aAAiD,IAAjD;IAmCvD;;IAhCQC,UAAU,CAACC,KAAD,EAAqB;MACpC;MACA,QAAQA,KAAK,CAACC,GAAd;QACE,KAAK,SAAL;UACE,KAAKC,SAAL,CAAeC,cAAc,CAACC,KAA9B,EAAqCC,KAArC;UACA;;QACF,KAAK,WAAL;UACE,KAAKH,SAAL,CAAeC,cAAc,CAACG,IAA9B,EAAoCD,KAApC;UACA;;QACF,KAAK,WAAL;UACE,KAAKH,SAAL,CAAeC,cAAc,CAACG,IAA9B,EAAoCD,KAApC;UACA;;QACF,KAAK,YAAL;UACE,KAAKH,SAAL,CAAeC,cAAc,CAACC,KAA9B,EAAqCC,KAArC;UACA;MAZJ;IAcD;;IAEMH,SAAS,CAACK,SAAD,EAA0B;MACxC,MAAMC,KAAK,GAAG,KAAKA,KAAL,CAAWC,OAAX,EAAd;MACAC,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB;MACA,MAAMI,oBAAoB,GAAGJ,KAAK,CAACK,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACC,SAAL,EAAxB,CAA7B;MACA,MAAMC,kBAAkB,GAAGR,KAAK,CAACI,oBAAoB,GAAGL,SAAxB,CAAhC;;MAEA,IAAIS,kBAAJ,EAAwB;QACtB,OAAOA,kBAAP;MACD;;MAED,OAAOT,SAAS,KAAKJ,cAAc,CAACG,IAA7B,GACHE,KAAK,CAACA,KAAK,CAACS,MAAN,GAAe,CAAhB,CADF,GAEHT,KAAK,CAAC,CAAD,CAFT;IAGD;;EAtCkC;;;qBAAxBX;EAAwB;;;UAAxBA;IAAwBqB;IAAAC;MAAA;oCAIlBvB,8BAA4B;;;;;;;;;;;;iBAJlCwB;QAAkB;;;;EAA/B,OAAavB,wBAAb;AAAA;AAyCA,IAAKM,cAGJ;EAHD,WAAKA,cAAL,EAAmB;IACjBA;IACAA;EACD,CAHD,EAAKA,cAAc,KAAdA,cAAc,MAAnB,CAGC;;EAAA,OAHIA,cAGJ;AAAA,IAHD","names":["QueryList","KeyboardManagerItemDirective","KeyboardManagerDirective","constructor","manageKeys","event","key","moveFocus","ArrowDirective","RIGHT","focus","LEFT","direction","items","toArray","console","log","currentSelectedIndex","findIndex","item","isFocused","targetElementFocus","length","selectors","contentQueries","ctx"],"sourceRoot":"","sources":["C:\\Users\\josias.m.caitano\\OneDrive - Accenture\\Documents\\projetos\\alura\\angular\\formacao-angular\\angular_design_componentes_acessibilidade\\src\\app\\shared\\directives\\keyboard-manager\\keyboard-manager.directive.ts"],"sourcesContent":["import { ContentChildren, Directive, HostListener, QueryList } from '@angular/core';\r\nimport { KeyboardManagerItemDirective } from './keyboard-manager-item.directive';\r\n\r\n@Directive({\r\n  selector: '[appKm]'\r\n})\r\nexport class KeyboardManagerDirective {\r\n\r\n  // Contentchild: busca todo mundo que é filho do elemento KeyboardManagerDirective\r\n  // QueryList: atualiza dinamicamente as listas\r\n  @ContentChildren(KeyboardManagerItemDirective) public items: QueryList<KeyboardManagerItemDirective> = null;\r\n\r\n  @HostListener('keyup', ['$event'])\r\n  public manageKeys(event: KeyboardEvent): void { \r\n    // event.key: dá acesso a tecla pressionado\r\n    switch (event.key) {\r\n      case 'ArrowUp': \r\n        this.moveFocus(ArrowDirective.RIGHT).focus();\r\n        break;\r\n      case 'ArrowDown':\r\n        this.moveFocus(ArrowDirective.LEFT).focus();\r\n        break;\r\n      case 'ArrowLeft': \r\n        this.moveFocus(ArrowDirective.LEFT).focus();\r\n        break;\r\n      case 'ArrowRight':\r\n        this.moveFocus(ArrowDirective.RIGHT).focus();\r\n        break;\r\n    }\r\n  }\r\n\r\n  public moveFocus(direction: ArrowDirective): KeyboardManagerItemDirective {\r\n    const items = this.items.toArray();\r\n    console.log(this.items)\r\n    const currentSelectedIndex = items.findIndex(item => item.isFocused());\r\n    const targetElementFocus = items[currentSelectedIndex + direction];\r\n\r\n    if (targetElementFocus) {\r\n      return targetElementFocus;\r\n    }\r\n\r\n    return direction === ArrowDirective.LEFT \r\n      ? items[items.length - 1]\r\n      : items[0];\r\n  }\r\n}\r\n\r\nenum ArrowDirective {\r\n  LEFT = -1,\r\n  RIGHT = 1\r\n}"]},"metadata":{},"sourceType":"module"}